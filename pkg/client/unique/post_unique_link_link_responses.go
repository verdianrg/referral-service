// Code generated by go-swagger; DO NOT EDIT.

package unique

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"referralservice/gen/models"
)

// PostUniqueLinkLinkReader is a Reader for the PostUniqueLinkLink structure.
type PostUniqueLinkLinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUniqueLinkLinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUniqueLinkLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostUniqueLinkLinkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPostUniqueLinkLinkDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostUniqueLinkLinkOK creates a PostUniqueLinkLinkOK with default headers values
func NewPostUniqueLinkLinkOK() *PostUniqueLinkLinkOK {
	return &PostUniqueLinkLinkOK{}
}

/*
PostUniqueLinkLinkOK describes a response with status code 200, with default header values.

success claim unique link
*/
type PostUniqueLinkLinkOK struct {
	Payload *models.BaseResponse
}

// IsSuccess returns true when this post unique link link o k response has a 2xx status code
func (o *PostUniqueLinkLinkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post unique link link o k response has a 3xx status code
func (o *PostUniqueLinkLinkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post unique link link o k response has a 4xx status code
func (o *PostUniqueLinkLinkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post unique link link o k response has a 5xx status code
func (o *PostUniqueLinkLinkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post unique link link o k response a status code equal to that given
func (o *PostUniqueLinkLinkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post unique link link o k response
func (o *PostUniqueLinkLinkOK) Code() int {
	return 200
}

func (o *PostUniqueLinkLinkOK) Error() string {
	return fmt.Sprintf("[POST /unique-link/{link}][%d] postUniqueLinkLinkOK  %+v", 200, o.Payload)
}

func (o *PostUniqueLinkLinkOK) String() string {
	return fmt.Sprintf("[POST /unique-link/{link}][%d] postUniqueLinkLinkOK  %+v", 200, o.Payload)
}

func (o *PostUniqueLinkLinkOK) GetPayload() *models.BaseResponse {
	return o.Payload
}

func (o *PostUniqueLinkLinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BaseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniqueLinkLinkUnauthorized creates a PostUniqueLinkLinkUnauthorized with default headers values
func NewPostUniqueLinkLinkUnauthorized() *PostUniqueLinkLinkUnauthorized {
	return &PostUniqueLinkLinkUnauthorized{}
}

/*
PostUniqueLinkLinkUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type PostUniqueLinkLinkUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this post unique link link unauthorized response has a 2xx status code
func (o *PostUniqueLinkLinkUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post unique link link unauthorized response has a 3xx status code
func (o *PostUniqueLinkLinkUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post unique link link unauthorized response has a 4xx status code
func (o *PostUniqueLinkLinkUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post unique link link unauthorized response has a 5xx status code
func (o *PostUniqueLinkLinkUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post unique link link unauthorized response a status code equal to that given
func (o *PostUniqueLinkLinkUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post unique link link unauthorized response
func (o *PostUniqueLinkLinkUnauthorized) Code() int {
	return 401
}

func (o *PostUniqueLinkLinkUnauthorized) Error() string {
	return fmt.Sprintf("[POST /unique-link/{link}][%d] postUniqueLinkLinkUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUniqueLinkLinkUnauthorized) String() string {
	return fmt.Sprintf("[POST /unique-link/{link}][%d] postUniqueLinkLinkUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUniqueLinkLinkUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *PostUniqueLinkLinkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniqueLinkLinkDefault creates a PostUniqueLinkLinkDefault with default headers values
func NewPostUniqueLinkLinkDefault(code int) *PostUniqueLinkLinkDefault {
	return &PostUniqueLinkLinkDefault{
		_statusCode: code,
	}
}

/*
PostUniqueLinkLinkDefault describes a response with status code -1, with default header values.

error
*/
type PostUniqueLinkLinkDefault struct {
	_statusCode int

	Payload *models.BaseResponse
}

// IsSuccess returns true when this post unique link link default response has a 2xx status code
func (o *PostUniqueLinkLinkDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this post unique link link default response has a 3xx status code
func (o *PostUniqueLinkLinkDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this post unique link link default response has a 4xx status code
func (o *PostUniqueLinkLinkDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this post unique link link default response has a 5xx status code
func (o *PostUniqueLinkLinkDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this post unique link link default response a status code equal to that given
func (o *PostUniqueLinkLinkDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the post unique link link default response
func (o *PostUniqueLinkLinkDefault) Code() int {
	return o._statusCode
}

func (o *PostUniqueLinkLinkDefault) Error() string {
	return fmt.Sprintf("[POST /unique-link/{link}][%d] PostUniqueLinkLink default  %+v", o._statusCode, o.Payload)
}

func (o *PostUniqueLinkLinkDefault) String() string {
	return fmt.Sprintf("[POST /unique-link/{link}][%d] PostUniqueLinkLink default  %+v", o._statusCode, o.Payload)
}

func (o *PostUniqueLinkLinkDefault) GetPayload() *models.BaseResponse {
	return o.Payload
}

func (o *PostUniqueLinkLinkDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BaseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostUniqueLinkLinkBody post unique link link body
swagger:model PostUniqueLinkLinkBody
*/
type PostUniqueLinkLinkBody struct {

	// email
	Email string `json:"email,omitempty"`
}

// Validate validates this post unique link link body
func (o *PostUniqueLinkLinkBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post unique link link body based on context it is used
func (o *PostUniqueLinkLinkBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUniqueLinkLinkBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUniqueLinkLinkBody) UnmarshalBinary(b []byte) error {
	var res PostUniqueLinkLinkBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
