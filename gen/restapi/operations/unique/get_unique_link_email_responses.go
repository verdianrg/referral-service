// Code generated by go-swagger; DO NOT EDIT.

package unique

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"referralservice/gen/models"
)

// GetUniqueLinkEmailOKCode is the HTTP code returned for type GetUniqueLinkEmailOK
const GetUniqueLinkEmailOKCode int = 200

/*
GetUniqueLinkEmailOK success claim unique link

swagger:response getUniqueLinkEmailOK
*/
type GetUniqueLinkEmailOK struct {

	/*
	  In: Body
	*/
	Payload *models.BaseResponse `json:"body,omitempty"`
}

// NewGetUniqueLinkEmailOK creates GetUniqueLinkEmailOK with default headers values
func NewGetUniqueLinkEmailOK() *GetUniqueLinkEmailOK {

	return &GetUniqueLinkEmailOK{}
}

// WithPayload adds the payload to the get unique link email o k response
func (o *GetUniqueLinkEmailOK) WithPayload(payload *models.BaseResponse) *GetUniqueLinkEmailOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get unique link email o k response
func (o *GetUniqueLinkEmailOK) SetPayload(payload *models.BaseResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniqueLinkEmailOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUniqueLinkEmailUnauthorizedCode is the HTTP code returned for type GetUniqueLinkEmailUnauthorized
const GetUniqueLinkEmailUnauthorizedCode int = 401

/*
GetUniqueLinkEmailUnauthorized unauthorized

swagger:response getUniqueLinkEmailUnauthorized
*/
type GetUniqueLinkEmailUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetUniqueLinkEmailUnauthorized creates GetUniqueLinkEmailUnauthorized with default headers values
func NewGetUniqueLinkEmailUnauthorized() *GetUniqueLinkEmailUnauthorized {

	return &GetUniqueLinkEmailUnauthorized{}
}

// WithPayload adds the payload to the get unique link email unauthorized response
func (o *GetUniqueLinkEmailUnauthorized) WithPayload(payload interface{}) *GetUniqueLinkEmailUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get unique link email unauthorized response
func (o *GetUniqueLinkEmailUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniqueLinkEmailUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*
GetUniqueLinkEmailDefault error

swagger:response getUniqueLinkEmailDefault
*/
type GetUniqueLinkEmailDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.BaseResponse `json:"body,omitempty"`
}

// NewGetUniqueLinkEmailDefault creates GetUniqueLinkEmailDefault with default headers values
func NewGetUniqueLinkEmailDefault(code int) *GetUniqueLinkEmailDefault {
	if code <= 0 {
		code = 500
	}

	return &GetUniqueLinkEmailDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get unique link email default response
func (o *GetUniqueLinkEmailDefault) WithStatusCode(code int) *GetUniqueLinkEmailDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get unique link email default response
func (o *GetUniqueLinkEmailDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get unique link email default response
func (o *GetUniqueLinkEmailDefault) WithPayload(payload *models.BaseResponse) *GetUniqueLinkEmailDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get unique link email default response
func (o *GetUniqueLinkEmailDefault) SetPayload(payload *models.BaseResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniqueLinkEmailDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
