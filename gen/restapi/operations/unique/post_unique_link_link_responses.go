// Code generated by go-swagger; DO NOT EDIT.

package unique

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"referralservice/gen/models"
)

// PostUniqueLinkLinkOKCode is the HTTP code returned for type PostUniqueLinkLinkOK
const PostUniqueLinkLinkOKCode int = 200

/*
PostUniqueLinkLinkOK success claim unique link

swagger:response postUniqueLinkLinkOK
*/
type PostUniqueLinkLinkOK struct {

	/*
	  In: Body
	*/
	Payload *models.BaseResponse `json:"body,omitempty"`
}

// NewPostUniqueLinkLinkOK creates PostUniqueLinkLinkOK with default headers values
func NewPostUniqueLinkLinkOK() *PostUniqueLinkLinkOK {

	return &PostUniqueLinkLinkOK{}
}

// WithPayload adds the payload to the post unique link link o k response
func (o *PostUniqueLinkLinkOK) WithPayload(payload *models.BaseResponse) *PostUniqueLinkLinkOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post unique link link o k response
func (o *PostUniqueLinkLinkOK) SetPayload(payload *models.BaseResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUniqueLinkLinkOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUniqueLinkLinkUnauthorizedCode is the HTTP code returned for type PostUniqueLinkLinkUnauthorized
const PostUniqueLinkLinkUnauthorizedCode int = 401

/*
PostUniqueLinkLinkUnauthorized unauthorized

swagger:response postUniqueLinkLinkUnauthorized
*/
type PostUniqueLinkLinkUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPostUniqueLinkLinkUnauthorized creates PostUniqueLinkLinkUnauthorized with default headers values
func NewPostUniqueLinkLinkUnauthorized() *PostUniqueLinkLinkUnauthorized {

	return &PostUniqueLinkLinkUnauthorized{}
}

// WithPayload adds the payload to the post unique link link unauthorized response
func (o *PostUniqueLinkLinkUnauthorized) WithPayload(payload interface{}) *PostUniqueLinkLinkUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post unique link link unauthorized response
func (o *PostUniqueLinkLinkUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUniqueLinkLinkUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*
PostUniqueLinkLinkDefault error

swagger:response postUniqueLinkLinkDefault
*/
type PostUniqueLinkLinkDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.BaseResponse `json:"body,omitempty"`
}

// NewPostUniqueLinkLinkDefault creates PostUniqueLinkLinkDefault with default headers values
func NewPostUniqueLinkLinkDefault(code int) *PostUniqueLinkLinkDefault {
	if code <= 0 {
		code = 500
	}

	return &PostUniqueLinkLinkDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post unique link link default response
func (o *PostUniqueLinkLinkDefault) WithStatusCode(code int) *PostUniqueLinkLinkDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post unique link link default response
func (o *PostUniqueLinkLinkDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post unique link link default response
func (o *PostUniqueLinkLinkDefault) WithPayload(payload *models.BaseResponse) *PostUniqueLinkLinkDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post unique link link default response
func (o *PostUniqueLinkLinkDefault) SetPayload(payload *models.BaseResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUniqueLinkLinkDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
