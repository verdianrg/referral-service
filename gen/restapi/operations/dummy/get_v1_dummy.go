// Code generated by go-swagger; DO NOT EDIT.

package dummy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"referralservice/gen/models"
)

// GetV1DummyHandlerFunc turns a function with the right signature into a get v1 dummy handler
type GetV1DummyHandlerFunc func(GetV1DummyParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1DummyHandlerFunc) Handle(params GetV1DummyParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetV1DummyHandler interface for that can handle valid get v1 dummy params
type GetV1DummyHandler interface {
	Handle(GetV1DummyParams, *models.Principal) middleware.Responder
}

// NewGetV1Dummy creates a new http.Handler for the get v1 dummy operation
func NewGetV1Dummy(ctx *middleware.Context, handler GetV1DummyHandler) *GetV1Dummy {
	return &GetV1Dummy{Context: ctx, Handler: handler}
}

/*
	GetV1Dummy swagger:route GET /v1/dummy dummy getV1Dummy

dummy endpoint

dummy endpoint
*/
type GetV1Dummy struct {
	Context *middleware.Context
	Handler GetV1DummyHandler
}

func (o *GetV1Dummy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetV1DummyParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
